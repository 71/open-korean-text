Index.PACKAGES = {"org.openkoreantext.processor.tools" : [{"name" : "org.openkoreantext.processor.tools.CreateChunkParsingCandidates", "shortDescription" : "Create Korean Parsing examples.", "object" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html", "members_object" : [{"label" : "run", "tail" : "(): Unit", "member" : "org.openkoreantext.processor.tools.CreateChunkParsingCandidates.run", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#run:Unit", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.openkoreantext.processor.tools.Runnable.main", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/CreateChunkParsingCandidates$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.tools.CreateConjugationExamples", "shortDescription" : "Create Korean predicate expansion goldenset from adjective and verb resources.", "object" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html", "members_object" : [{"label" : "run", "tail" : "(): Unit", "member" : "org.openkoreantext.processor.tools.CreateConjugationExamples.run", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#run:Unit", "kind" : "def"}, {"label" : "ConjugationExample", "tail" : "", "member" : "org.openkoreantext.processor.tools.CreateConjugationExamples.ConjugationExample", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#ConjugationExampleextendsProductwithSerializable", "kind" : "case class"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.openkoreantext.processor.tools.Runnable.main", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/CreateConjugationExamples$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.tools.CreateParsingExamples", "shortDescription" : "Create Korean Parsing examples.", "object" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html", "members_object" : [{"label" : "run", "tail" : "(): Unit", "member" : "org.openkoreantext.processor.tools.CreateParsingExamples.run", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#run:Unit", "kind" : "def"}, {"label" : "ParsingExample", "tail" : "", "member" : "org.openkoreantext.processor.tools.CreateParsingExamples.ParsingExample", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#ParsingExampleextendsProductwithSerializable", "kind" : "case class"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.openkoreantext.processor.tools.Runnable.main", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/CreateParsingExamples$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.tools.CreatePhraseExtractionExamples", "shortDescription" : "Create Korean Phrase Extraction Examples.", "object" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html", "members_object" : [{"label" : "run", "tail" : "(): Unit", "member" : "org.openkoreantext.processor.tools.CreatePhraseExtractionExamples.run", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#run:Unit", "kind" : "def"}, {"label" : "PhraseExample", "tail" : "", "member" : "org.openkoreantext.processor.tools.CreatePhraseExtractionExamples.PhraseExample", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#PhraseExampleextendsProductwithSerializable", "kind" : "case class"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.openkoreantext.processor.tools.Runnable.main", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/CreatePhraseExtractionExamples$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.tools.DeduplicateAndSortDictionaries", "shortDescription" : "Clean up resources by removing duplicates and sorting.", "object" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html", "members_object" : [{"label" : "run", "tail" : "(): Unit", "member" : "org.openkoreantext.processor.tools.DeduplicateAndSortDictionaries.run", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#run:Unit", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.openkoreantext.processor.tools.Runnable.main", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/DeduplicateAndSortDictionaries$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.tools.Runnable", "shortDescription" : "Created by hohyonryu on 1\/3\/15.", "members_class" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.openkoreantext.processor.tools.Runnable.main", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#main(args:Array[String]):Unit", "kind" : "def"}, {"member" : "org.openkoreantext.processor.tools.Runnable#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(): Unit", "member" : "org.openkoreantext.processor.tools.Runnable.run", "link" : "org\/openkoreantext\/processor\/tools\/Runnable.html#run:Unit", "kind" : "abstract def"}], "class" : "org\/openkoreantext\/processor\/tools\/Runnable.html", "kind" : "class"}, {"name" : "org.openkoreantext.processor.tools.UpdateAllTheExamples", "shortDescription" : "", "object" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.openkoreantext.processor.tools.UpdateAllTheExamples.main", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "runTools", "tail" : "(objects: Runnable*): Unit", "member" : "org.openkoreantext.processor.tools.UpdateAllTheExamples.runTools", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#runTools(objects:org.openkoreantext.processor.tools.Runnable*):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tools\/UpdateAllTheExamples$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.openkoreantext.processor.qa" : [{"name" : "org.openkoreantext.processor.qa.BatchGetUnknownNouns", "shortDescription" : "Find unknown nouns from a file of tweets.", "object" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.openkoreantext.processor.qa.BatchGetUnknownNouns.main", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "ChunkWithTweet", "tail" : "", "member" : "org.openkoreantext.processor.qa.BatchGetUnknownNouns.ChunkWithTweet", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#ChunkWithTweetextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/qa\/BatchGetUnknownNouns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.qa.BatchTokenizeTweets", "shortDescription" : "Batch tokenize a file of Korean tweets.", "object" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.openkoreantext.processor.qa.BatchTokenizeTweets.main", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "ParseTime", "tail" : "", "member" : "org.openkoreantext.processor.qa.BatchTokenizeTweets.ParseTime", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#ParseTimeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/qa\/BatchTokenizeTweets$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.qa.KoreanProcessorSandbox", "shortDescription" : "A simple testing tool to try Korean tokenization.", "object" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html", "members_object" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "org.openkoreantext.processor.qa.KoreanProcessorSandbox.main", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/qa\/KoreanProcessorSandbox$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.openkoreantext.processor.util" : [{"name" : "org.openkoreantext.processor.util.CharacterUtils", "shortDescription" : "CharacterUtils provides a unified interface to Character-relatedoperations.", "members_class" : [{"label" : "fill", "tail" : "(buffer: CharacterBuffer, reader: Reader): Boolean", "member" : "org.openkoreantext.processor.util.CharacterUtils.fill", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#fill(buffer:org.openkoreantext.processor.util.CharacterUtils.CharacterBuffer,reader:java.io.Reader):Boolean", "kind" : "final def"}, {"label" : "toChars", "tail" : "(src: Array[Int], srcOff: Int, srcLen: Int, dest: Array[Char], destOff: Int): Int", "member" : "org.openkoreantext.processor.util.CharacterUtils.toChars", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#toChars(src:Array[Int],srcOff:Int,srcLen:Int,dest:Array[Char],destOff:Int):Int", "kind" : "final def"}, {"label" : "toCodePoints", "tail" : "(src: Array[Char], srcOff: Int, srcLen: Int, dest: Array[Int], destOff: Int): Int", "member" : "org.openkoreantext.processor.util.CharacterUtils.toCodePoints", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#toCodePoints(src:Array[Char],srcOff:Int,srcLen:Int,dest:Array[Int],destOff:Int):Int", "kind" : "final def"}, {"label" : "toUpperCase", "tail" : "(buffer: Array[Char], offset: Int, limit: Int): Unit", "member" : "org.openkoreantext.processor.util.CharacterUtils.toUpperCase", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#toUpperCase(buffer:Array[Char],offset:Int,limit:Int):Unit", "kind" : "final def"}, {"label" : "toLowerCase", "tail" : "(buffer: Array[Char], offset: Int, limit: Int): Unit", "member" : "org.openkoreantext.processor.util.CharacterUtils.toLowerCase", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#toLowerCase(buffer:Array[Char],offset:Int,limit:Int):Unit", "kind" : "final def"}, {"member" : "org.openkoreantext.processor.util.CharacterUtils#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "offsetByCodePoints", "tail" : "(buf: Array[Char], start: Int, count: Int, index: Int, offset: Int): Int", "member" : "org.openkoreantext.processor.util.CharacterUtils.offsetByCodePoints", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#offsetByCodePoints(buf:Array[Char],start:Int,count:Int,index:Int,offset:Int):Int", "kind" : "abstract def"}, {"label" : "fill", "tail" : "(buffer: CharacterBuffer, reader: Reader, numChars: Int): Boolean", "member" : "org.openkoreantext.processor.util.CharacterUtils.fill", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#fill(buffer:org.openkoreantext.processor.util.CharacterUtils.CharacterBuffer,reader:java.io.Reader,numChars:Int):Boolean", "kind" : "abstract def"}, {"label" : "codePointCount", "tail" : "(seq: CharSequence): Int", "member" : "org.openkoreantext.processor.util.CharacterUtils.codePointCount", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#codePointCount(seq:CharSequence):Int", "kind" : "abstract def"}, {"label" : "codePointAt", "tail" : "(chars: Array[Char], offset: Int, limit: Int): Int", "member" : "org.openkoreantext.processor.util.CharacterUtils.codePointAt", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#codePointAt(chars:Array[Char],offset:Int,limit:Int):Int", "kind" : "abstract def"}, {"label" : "codePointAt", "tail" : "(seq: CharSequence, offset: Int): Int", "member" : "org.openkoreantext.processor.util.CharacterUtils.codePointAt", "link" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html#codePointAt(seq:CharSequence,offset:Int):Int", "kind" : "abstract def"}], "class" : "org\/openkoreantext\/processor\/util\/CharacterUtils.html", "kind" : "class"}, {"name" : "org.openkoreantext.processor.util.CharArrayMap", "shortDescription" : "A simple class that stores key Strings as char[]'s in ahash table.", "members_class" : [{"label" : "EntrySet", "tail" : "", "member" : "org.openkoreantext.processor.util.CharArrayMap.EntrySet", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#EntrySetextendsAbstractSet[java.util.Map.Entry[Object,V]]", "kind" : "final class"}, {"label" : "EntryIterator", "tail" : "", "member" : "org.openkoreantext.processor.util.CharArrayMap.EntryIterator", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#EntryIteratorextendsIterator[java.util.Map.Entry[Object,V]]", "kind" : "class"}, {"label" : "keySet", "tail" : "(): CharArraySet", "member" : "org.openkoreantext.processor.util.CharArrayMap.keySet", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#keySet():org.openkoreantext.processor.util.CharArraySet", "kind" : "final def"}, {"label" : "entrySet", "tail" : "(): EntrySet", "member" : "org.openkoreantext.processor.util.CharArrayMap.entrySet", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#entrySet():CharArrayMap.this.EntrySet", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.openkoreantext.processor.util.CharArrayMap.toString", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#toString():String", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "org.openkoreantext.processor.util.CharArrayMap.size", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#size():Int", "kind" : "def"}, {"label" : "remove", "tail" : "(o: Any): V", "member" : "org.openkoreantext.processor.util.CharArrayMap.remove", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#remove(o:Any):V", "kind" : "def"}, {"label" : "put", "tail" : "(text: Array[Char], value: V): V", "member" : "org.openkoreantext.processor.util.CharArrayMap.put", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#put(text:Array[Char],value:V):V", "kind" : "def"}, {"label" : "put", "tail" : "(text: String, value: V): V", "member" : "org.openkoreantext.processor.util.CharArrayMap.put", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#put(text:String,value:V):V", "kind" : "def"}, {"label" : "put", "tail" : "(o: Any, value: V): V", "member" : "org.openkoreantext.processor.util.CharArrayMap.put", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#put(o:Any,value:V):V", "kind" : "def"}, {"label" : "put", "tail" : "(text: CharSequence, value: V): V", "member" : "org.openkoreantext.processor.util.CharArrayMap.put", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#put(text:CharSequence,value:V):V", "kind" : "def"}, {"label" : "get", "tail" : "(o: Any): V", "member" : "org.openkoreantext.processor.util.CharArrayMap.get", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#get(o:Any):V", "kind" : "def"}, {"label" : "get", "tail" : "(cs: CharSequence): V", "member" : "org.openkoreantext.processor.util.CharArrayMap.get", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#get(cs:CharSequence):V", "kind" : "def"}, {"label" : "get", "tail" : "(text: Array[Char], off: Int, len: Int): V", "member" : "org.openkoreantext.processor.util.CharArrayMap.get", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#get(text:Array[Char],off:Int,len:Int):V", "kind" : "def"}, {"label" : "containsKey", "tail" : "(o: Any): Boolean", "member" : "org.openkoreantext.processor.util.CharArrayMap.containsKey", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#containsKey(o:Any):Boolean", "kind" : "def"}, {"label" : "containsKey", "tail" : "(cs: CharSequence): Boolean", "member" : "org.openkoreantext.processor.util.CharArrayMap.containsKey", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#containsKey(cs:CharSequence):Boolean", "kind" : "def"}, {"label" : "containsKey", "tail" : "(text: Array[Char], off: Int, len: Int): Boolean", "member" : "org.openkoreantext.processor.util.CharArrayMap.containsKey", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#containsKey(text:Array[Char],off:Int,len:Int):Boolean", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "org.openkoreantext.processor.util.CharArrayMap.clear", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#clear():Unit", "kind" : "def"}, {"member" : "org.openkoreantext.processor.util.CharArrayMap#<init>", "error" : "unsupported entity"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "java.util.AbstractMap.clone", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#clone():Object", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "java.util.AbstractMap.hashCode", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "java.util.AbstractMap.equals", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "values", "tail" : "(): Collection[V]", "member" : "java.util.AbstractMap.values", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#values():java.util.Collection[V]", "kind" : "def"}, {"label" : "putAll", "tail" : "(arg0: Map[_ <: AnyRef, _ <: V]): Unit", "member" : "java.util.AbstractMap.putAll", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#putAll(x$1:java.util.Map[_<:K,_<:V]):Unit", "kind" : "def"}, {"label" : "containsValue", "tail" : "(arg0: Any): Boolean", "member" : "java.util.AbstractMap.containsValue", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#containsValue(x$1:Any):Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "java.util.AbstractMap.isEmpty", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "merge", "tail" : "(arg0: AnyRef, arg1: V, arg2: BiFunction[_ >: V, _ >: V, _ <: V]): V", "member" : "java.util.Map.merge", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#merge(x$1:K,x$2:V,x$3:java.util.function.BiFunction[_>:V,_>:V,_<:V]):V", "kind" : "def"}, {"label" : "compute", "tail" : "(arg0: AnyRef, arg1: BiFunction[_ >: AnyRef, _ >: V, _ <: V]): V", "member" : "java.util.Map.compute", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#compute(x$1:K,x$2:java.util.function.BiFunction[_>:K,_>:V,_<:V]):V", "kind" : "def"}, {"label" : "computeIfPresent", "tail" : "(arg0: AnyRef, arg1: BiFunction[_ >: AnyRef, _ >: V, _ <: V]): V", "member" : "java.util.Map.computeIfPresent", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#computeIfPresent(x$1:K,x$2:java.util.function.BiFunction[_>:K,_>:V,_<:V]):V", "kind" : "def"}, {"label" : "computeIfAbsent", "tail" : "(arg0: AnyRef, arg1: Function[_ >: AnyRef, _ <: V]): V", "member" : "java.util.Map.computeIfAbsent", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#computeIfAbsent(x$1:K,x$2:java.util.function.Function[_>:K,_<:V]):V", "kind" : "def"}, {"label" : "replace", "tail" : "(arg0: AnyRef, arg1: V): V", "member" : "java.util.Map.replace", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#replace(x$1:K,x$2:V):V", "kind" : "def"}, {"label" : "replace", "tail" : "(arg0: AnyRef, arg1: V, arg2: V): Boolean", "member" : "java.util.Map.replace", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#replace(x$1:K,x$2:V,x$3:V):Boolean", "kind" : "def"}, {"label" : "remove", "tail" : "(arg0: Any, arg1: Any): Boolean", "member" : "java.util.Map.remove", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#remove(x$1:Any,x$2:Any):Boolean", "kind" : "def"}, {"label" : "putIfAbsent", "tail" : "(arg0: AnyRef, arg1: V): V", "member" : "java.util.Map.putIfAbsent", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#putIfAbsent(x$1:K,x$2:V):V", "kind" : "def"}, {"label" : "replaceAll", "tail" : "(arg0: BiFunction[_ >: AnyRef, _ >: V, _ <: V]): Unit", "member" : "java.util.Map.replaceAll", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#replaceAll(x$1:java.util.function.BiFunction[_>:K,_>:V,_<:V]):Unit", "kind" : "def"}, {"label" : "forEach", "tail" : "(arg0: BiConsumer[_ >: AnyRef, _ >: V]): Unit", "member" : "java.util.Map.forEach", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#forEach(x$1:java.util.function.BiConsumer[_>:K,_>:V]):Unit", "kind" : "def"}, {"label" : "getOrDefault", "tail" : "(arg0: Any, arg1: V): V", "member" : "java.util.Map.getOrDefault", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#getOrDefault(x$1:Any,x$2:V):V", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/openkoreantext\/processor\/util\/CharArrayMap.html", "kind" : "class"}, {"name" : "org.openkoreantext.processor.util.CharArraySet", "shortDescription" : "A simple class that stores Strings as char[]'s in ahash table.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.openkoreantext.processor.util.CharArraySet.toString", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#toString():String", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[AnyRef]", "member" : "org.openkoreantext.processor.util.CharArraySet.iterator", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#iterator():java.util.Iterator[Object]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "org.openkoreantext.processor.util.CharArraySet.size", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#size():Int", "kind" : "def"}, {"label" : "removeAll", "tail" : "(words: List[String]): Boolean", "member" : "org.openkoreantext.processor.util.CharArraySet.removeAll", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#removeAll(words:java.util.List[String]):Boolean", "kind" : "def"}, {"label" : "remove", "tail" : "(text: String): Boolean", "member" : "org.openkoreantext.processor.util.CharArraySet.remove", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#remove(text:String):Boolean", "kind" : "def"}, {"label" : "add", "tail" : "(text: Array[Char]): Boolean", "member" : "org.openkoreantext.processor.util.CharArraySet.add", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#add(text:Array[Char]):Boolean", "kind" : "def"}, {"label" : "add", "tail" : "(text: String): Boolean", "member" : "org.openkoreantext.processor.util.CharArraySet.add", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#add(text:String):Boolean", "kind" : "def"}, {"label" : "add", "tail" : "(text: CharSequence): Boolean", "member" : "org.openkoreantext.processor.util.CharArraySet.add", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#add(text:CharSequence):Boolean", "kind" : "def"}, {"label" : "add", "tail" : "(o: Any): Boolean", "member" : "org.openkoreantext.processor.util.CharArraySet.add", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#add(o:Any):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(o: Any): Boolean", "member" : "org.openkoreantext.processor.util.CharArraySet.contains", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#contains(o:Any):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(cs: CharSequence): Boolean", "member" : "org.openkoreantext.processor.util.CharArraySet.contains", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#contains(cs:CharSequence):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(text: Array[Char], off: Int, len: Int): Boolean", "member" : "org.openkoreantext.processor.util.CharArraySet.contains", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#contains(text:Array[Char],off:Int,len:Int):Boolean", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "org.openkoreantext.processor.util.CharArraySet.clear", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#clear():Unit", "kind" : "def"}, {"member" : "org.openkoreantext.processor.util.CharArraySet#<init>", "error" : "unsupported entity"}, {"label" : "removeAll", "tail" : "(arg0: Collection[_]): Boolean", "member" : "java.util.AbstractSet.removeAll", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#removeAll(x$1:java.util.Collection[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "java.util.AbstractSet.hashCode", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "java.util.AbstractSet.equals", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "spliterator", "tail" : "(): Spliterator[AnyRef]", "member" : "java.util.Set.spliterator", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#spliterator():java.util.Spliterator[E]", "kind" : "def"}, {"label" : "retainAll", "tail" : "(arg0: Collection[_]): Boolean", "member" : "java.util.AbstractCollection.retainAll", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#retainAll(x$1:java.util.Collection[_]):Boolean", "kind" : "def"}, {"label" : "addAll", "tail" : "(arg0: Collection[_ <: AnyRef]): Boolean", "member" : "java.util.AbstractCollection.addAll", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#addAll(x$1:java.util.Collection[_<:E]):Boolean", "kind" : "def"}, {"label" : "containsAll", "tail" : "(arg0: Collection[_]): Boolean", "member" : "java.util.AbstractCollection.containsAll", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#containsAll(x$1:java.util.Collection[_]):Boolean", "kind" : "def"}, {"label" : "remove", "tail" : "(arg0: Any): Boolean", "member" : "java.util.AbstractCollection.remove", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#remove(x$1:Any):Boolean", "kind" : "def"}, {"label" : "toArray", "tail" : "(arg0: Array[T]): Array[T]", "member" : "java.util.AbstractCollection.toArray", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#toArray[T](x$1:Array[TwithObject]):Array[TwithObject]", "kind" : "def"}, {"label" : "toArray", "tail" : "(): Array[AnyRef]", "member" : "java.util.AbstractCollection.toArray", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#toArray():Array[Object]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "java.util.AbstractCollection.isEmpty", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#isEmpty():Boolean", "kind" : "def"}, {"label" : "parallelStream", "tail" : "(): Stream[AnyRef]", "member" : "java.util.Collection.parallelStream", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#parallelStream():java.util.stream.Stream[E]", "kind" : "def"}, {"label" : "stream", "tail" : "(): Stream[AnyRef]", "member" : "java.util.Collection.stream", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#stream():java.util.stream.Stream[E]", "kind" : "def"}, {"label" : "removeIf", "tail" : "(arg0: Predicate[_ >: AnyRef]): Boolean", "member" : "java.util.Collection.removeIf", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#removeIf(x$1:java.util.function.Predicate[_>:E]):Boolean", "kind" : "def"}, {"label" : "forEach", "tail" : "(arg0: Consumer[_ >: AnyRef]): Unit", "member" : "java.lang.Iterable.forEach", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#forEach(x$1:java.util.function.Consumer[_>:T]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/CharArraySet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/openkoreantext\/processor\/util\/CharArraySet.html", "kind" : "class"}, {"name" : "org.openkoreantext.processor.util.Hangul", "shortDescription" : "Hangul analysis helper.", "object" : "org\/openkoreantext\/processor\/util\/Hangul$.html", "members_object" : [{"label" : "composeHangul", "tail" : "(hc: HangulChar): Char", "member" : "org.openkoreantext.processor.util.Hangul.composeHangul", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#composeHangul(hc:org.openkoreantext.processor.util.Hangul.HangulChar):Char", "kind" : "def"}, {"label" : "composeHangul", "tail" : "(onset: Char, vowel: Char, coda: Char): Char", "member" : "org.openkoreantext.processor.util.Hangul.composeHangul", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#composeHangul(onset:Char,vowel:Char,coda:Char):Char", "kind" : "def"}, {"label" : "hasCoda", "tail" : "(c: Char): Boolean", "member" : "org.openkoreantext.processor.util.Hangul.hasCoda", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#hasCoda(c:Char):Boolean", "kind" : "def"}, {"label" : "decomposeHangul", "tail" : "(c: Char): HangulChar", "member" : "org.openkoreantext.processor.util.Hangul.decomposeHangul", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#decomposeHangul(c:Char):org.openkoreantext.processor.util.Hangul.HangulChar", "kind" : "def"}, {"label" : "DOUBLE_CODAS", "tail" : ": Map[Char, DoubleCoda]", "member" : "org.openkoreantext.processor.util.Hangul.DOUBLE_CODAS", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#DOUBLE_CODAS:scala.collection.immutable.Map[Char,org.openkoreantext.processor.util.Hangul.DoubleCoda]", "kind" : "val"}, {"label" : "DoubleCoda", "tail" : "", "member" : "org.openkoreantext.processor.util.Hangul.DoubleCoda", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#DoubleCodaextendsProductwithSerializable", "kind" : "case class"}, {"label" : "CODA_MAP", "tail" : ": Map[Char, Int]", "member" : "org.openkoreantext.processor.util.Hangul.CODA_MAP", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#CODA_MAP:scala.collection.immutable.Map[Char,Int]", "kind" : "val"}, {"label" : "HangulChar", "tail" : "", "member" : "org.openkoreantext.processor.util.Hangul.HangulChar", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#HangulCharextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/Hangul$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.util.KoreanConjugation", "shortDescription" : "Expands Korean verbs and adjectives to all possible conjugation forms.", "object" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html", "members_object" : [{"label" : "conjugatePredicated", "tail" : "(words: Set[String], isAdjective: Boolean): Set[String]", "member" : "org.openkoreantext.processor.util.KoreanConjugation.conjugatePredicated", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#conjugatePredicated(words:Set[String],isAdjective:Boolean):Set[String]", "kind" : "def"}, {"label" : "conjugatePredicatesToCharArraySet", "tail" : "(words: Set[String], isAdjective: Boolean): CharArraySet", "member" : "org.openkoreantext.processor.util.KoreanConjugation.conjugatePredicatesToCharArraySet", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#conjugatePredicatesToCharArraySet(words:Set[String],isAdjective:Boolean):org.openkoreantext.processor.util.CharArraySet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/KoreanConjugation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.util.KoreanDictionaryProvider", "shortDescription" : "Provides a singleton Korean dictionary", "object" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html", "members_object" : [{"label" : "predicateStems", "tail" : ": Map[KoreanPos.Value, Map[String, String]]", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.predicateStems", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#predicateStems:Map[org.openkoreantext.processor.util.KoreanPos.Value,Map[String,String]]", "kind" : "lazy val"}, {"label" : "typoDictionaryByLength", "tail" : ": Map[Int, Map[String, String]]", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.typoDictionaryByLength", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#typoDictionaryByLength:Map[Int,Map[String,String]]", "kind" : "lazy val"}, {"label" : "nameDictionary", "tail" : ": Map[Symbol, CharArraySet]", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.nameDictionary", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#nameDictionary:scala.collection.immutable.Map[Symbol,org.openkoreantext.processor.util.CharArraySet]", "kind" : "lazy val"}, {"label" : "properNouns", "tail" : ": CharArraySet", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.properNouns", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#properNouns:org.openkoreantext.processor.util.CharArraySet", "kind" : "val"}, {"label" : "spamNouns", "tail" : ": CharArraySet", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.spamNouns", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#spamNouns:org.openkoreantext.processor.util.CharArraySet", "kind" : "lazy val"}, {"label" : "koreanDictionary", "tail" : ": HashMap[KoreanPos, CharArraySet]", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.koreanDictionary", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#koreanDictionary:java.util.HashMap[org.openkoreantext.processor.util.KoreanPos.KoreanPos,org.openkoreantext.processor.util.CharArraySet]", "kind" : "val"}, {"label" : "removeWordsToDictionary", "tail" : "(pos: KoreanPos, words: Seq[String]): Boolean", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.removeWordsToDictionary", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#removeWordsToDictionary(pos:org.openkoreantext.processor.util.KoreanPos.KoreanPos,words:Seq[String]):Boolean", "kind" : "def"}, {"label" : "addWordsToDictionary", "tail" : "(pos: KoreanPos, words: Seq[String]): Boolean", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.addWordsToDictionary", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#addWordsToDictionary(pos:org.openkoreantext.processor.util.KoreanPos.KoreanPos,words:Seq[String]):Boolean", "kind" : "def"}, {"label" : "koreanEntityFreq", "tail" : ": HashMap[CharSequence, Float]", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.koreanEntityFreq", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#koreanEntityFreq:java.util.HashMap[CharSequence,Float]", "kind" : "lazy val"}, {"label" : "newCharArraySet", "tail" : "(): CharArraySet", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.newCharArraySet", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#newCharArraySet:org.openkoreantext.processor.util.CharArraySet", "kind" : "def"}, {"label" : "readFileByLineFromResources", "tail" : "(filename: String): Iterator[String]", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.readFileByLineFromResources", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#readFileByLineFromResources(filename:String):Iterator[String]", "kind" : "def"}, {"label" : "readWords", "tail" : "(filenames: String*): CharArraySet", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.readWords", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#readWords(filenames:String*):org.openkoreantext.processor.util.CharArraySet", "kind" : "def"}, {"label" : "readWordsAsSet", "tail" : "(filenames: String*): Set[String]", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.readWordsAsSet", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#readWordsAsSet(filenames:String*):Set[String]", "kind" : "def"}, {"label" : "readWordsAsSeq", "tail" : "(filename: String): Seq[String]", "member" : "org.openkoreantext.processor.util.KoreanDictionaryProvider.readWordsAsSeq", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#readWordsAsSeq(filename:String):Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/KoreanDictionaryProvider$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.util.KoreanPos", "shortDescription" : "Korean Part-of-Speech", "object" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html", "members_object" : [{"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetLike[Enumeration.this.Value,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "Predicates", "tail" : ": Set[Value]", "member" : "org.openkoreantext.processor.util.KoreanPos.Predicates", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Predicates:scala.collection.immutable.Set[org.openkoreantext.processor.util.KoreanPos.Value]", "kind" : "val"}, {"label" : "getTrie", "tail" : "(sequences: Map[String, KoreanPos]): List[KoreanPosTrie]", "member" : "org.openkoreantext.processor.util.KoreanPos.getTrie", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#getTrie(sequences:Map[String,org.openkoreantext.processor.util.KoreanPos.KoreanPos]):List[org.openkoreantext.processor.util.KoreanPos.KoreanPosTrie]", "kind" : "def"}, {"label" : "buildTrie", "tail" : "(s: String, ending_pos: KoreanPos): List[KoreanPosTrie]", "member" : "org.openkoreantext.processor.util.KoreanPos.buildTrie", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#buildTrie(s:String,ending_pos:org.openkoreantext.processor.util.KoreanPos.KoreanPos):List[org.openkoreantext.processor.util.KoreanPos.KoreanPosTrie]", "kind" : "def"}, {"label" : "selfNode", "tail" : ": KoreanPosTrie", "member" : "org.openkoreantext.processor.util.KoreanPos.selfNode", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#selfNode:org.openkoreantext.processor.util.KoreanPos.KoreanPosTrie", "kind" : "val"}, {"label" : "KoreanPosTrie", "tail" : "", "member" : "org.openkoreantext.processor.util.KoreanPos.KoreanPosTrie", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#KoreanPosTrieextendsProductwithSerializable", "kind" : "case class"}, {"label" : "shortCut", "tail" : ": Map[Char, Value]", "member" : "org.openkoreantext.processor.util.KoreanPos.shortCut", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#shortCut:scala.collection.immutable.Map[Char,org.openkoreantext.processor.util.KoreanPos.Value]", "kind" : "val"}, {"label" : "OtherPoses", "tail" : ": Set[Value]", "member" : "org.openkoreantext.processor.util.KoreanPos.OtherPoses", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#OtherPoses:scala.collection.immutable.Set[org.openkoreantext.processor.util.KoreanPos.Value]", "kind" : "val"}, {"label" : "ProperNoun", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.ProperNoun", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#ProperNoun:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Others", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Others", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Others:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Space", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Space", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Space:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "CashTag", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.CashTag", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#CashTag:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "URL", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.URL", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#URL:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Email", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Email", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Email:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "ScreenName", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.ScreenName", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#ScreenName:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Hashtag", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Hashtag", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Hashtag:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Punctuation", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Punctuation", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Punctuation:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Alpha", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Alpha", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Alpha:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "KoreanParticle", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.KoreanParticle", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#KoreanParticle:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Number", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Number", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Number:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Foreign", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Foreign", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Foreign:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Korean", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Korean", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Korean:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Unknown", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Unknown", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Unknown:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Suffix", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Suffix", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Suffix:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "VerbPrefix", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.VerbPrefix", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#VerbPrefix:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Modifier", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Modifier", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Modifier:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Conjunction", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Conjunction", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Conjunction:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "PreEomi", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.PreEomi", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#PreEomi:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Eomi", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Eomi", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Eomi:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Josa", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Josa", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Josa:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Exclamation", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Exclamation", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Exclamation:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Determiner", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Determiner", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Determiner:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Adverb", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Adverb", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Adverb:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Adjective", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Adjective", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Adjective:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Verb", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Verb", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Verb:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "Noun", "tail" : ": Value", "member" : "org.openkoreantext.processor.util.KoreanPos.Noun", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Noun:org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "val"}, {"label" : "KoreanPos", "tail" : "", "member" : "org.openkoreantext.processor.util.KoreanPos.KoreanPos", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#KoreanPos=org.openkoreantext.processor.util.KoreanPos.Value", "kind" : "type"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/KoreanPos$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.util.KoreanSubstantive", "shortDescription" : "Helper methods for Korean nouns and josas.", "object" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html", "members_object" : [{"label" : "collapseNouns", "tail" : "(posNodes: Seq[KoreanToken]): Seq[KoreanToken]", "member" : "org.openkoreantext.processor.util.KoreanSubstantive.collapseNouns", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#collapseNouns(posNodes:Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]):Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]", "kind" : "def"}, {"label" : "isKoreanNameVariation", "tail" : "(chunk: CharSequence): Boolean", "member" : "org.openkoreantext.processor.util.KoreanSubstantive.isKoreanNameVariation", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#isKoreanNameVariation(chunk:CharSequence):Boolean", "kind" : "def"}, {"label" : "isKoreanNumber", "tail" : "(chunk: CharSequence): Boolean", "member" : "org.openkoreantext.processor.util.KoreanSubstantive.isKoreanNumber", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#isKoreanNumber(chunk:CharSequence):Boolean", "kind" : "def"}, {"label" : "isName", "tail" : "(chunk: CharSequence): Boolean", "member" : "org.openkoreantext.processor.util.KoreanSubstantive.isName", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#isName(chunk:CharSequence):Boolean", "kind" : "def"}, {"label" : "isJosaAttachable", "tail" : "(prevChar: Char, headChar: Char): Boolean", "member" : "org.openkoreantext.processor.util.KoreanSubstantive.isJosaAttachable", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#isJosaAttachable(prevChar:Char,headChar:Char):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/util\/KoreanSubstantive$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.openkoreantext.processor.phrase_extractor" : [{"name" : "org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor", "shortDescription" : "KoreanPhraseExtractor extracts suitable phrases for trending topics.", "object" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html", "members_object" : [{"label" : "extractPhrases", "tail" : "(tokens: Seq[KoreanToken], filterSpam: Boolean, addHashtags: Boolean): Seq[KoreanPhrase]", "member" : "org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.extractPhrases", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#extractPhrases(tokens:Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken],filterSpam:Boolean,addHashtags:Boolean):Seq[org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.KoreanPhrase]", "kind" : "def"}, {"label" : "getCandidatePhraseChunks", "tail" : "(phrases: KoreanPhraseChunk, filterSpam: Boolean): Seq[KoreanPhraseChunk]", "member" : "org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.getCandidatePhraseChunks", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#getCandidatePhraseChunks(phrases:org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.KoreanPhraseChunk,filterSpam:Boolean):Seq[org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.KoreanPhraseChunk]", "kind" : "def"}, {"label" : "collapsePos", "tail" : "(tokens: Seq[KoreanToken]): Seq[KoreanPhrase]", "member" : "org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.collapsePos", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#collapsePos(tokens:Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]):Seq[org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.KoreanPhrase]", "kind" : "def"}, {"label" : "PhraseBuffer", "tail" : "", "member" : "org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.PhraseBuffer", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#PhraseBufferextendsProductwithSerializable", "kind" : "case class"}, {"label" : "KoreanPhrase", "tail" : "", "member" : "org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.KoreanPhrase", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#KoreanPhraseextendsProductwithSerializable", "kind" : "case class"}, {"label" : "KoreanPhraseChunk", "tail" : "", "member" : "org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.KoreanPhraseChunk", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#KoreanPhraseChunk=Seq[org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.KoreanPhrase]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/phrase_extractor\/KoreanPhraseExtractor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.openkoreantext.processor.stemmer" : [{"name" : "org.openkoreantext.processor.stemmer.KoreanStemmer", "shortDescription" : "Stems Adjectives and Verbs: 새로운 스테밍을 추가했었다.", "object" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html", "members_object" : [{"label" : "stem", "tail" : "(tokens: Seq[KoreanToken]): Seq[KoreanToken]", "member" : "org.openkoreantext.processor.stemmer.KoreanStemmer.stem", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#stem(tokens:Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]):Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/stemmer\/KoreanStemmer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.openkoreantext.processor.normalizer" : [{"name" : "org.openkoreantext.processor.normalizer.KoreanNormalizer", "shortDescription" : "Normalize Korean colloquial text", "object" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html", "members_object" : [{"label" : "normalizeCodaN", "tail" : "(chunk: CharSequence): CharSequence", "member" : "org.openkoreantext.processor.normalizer.KoreanNormalizer.normalizeCodaN", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#normalizeCodaN(chunk:CharSequence):CharSequence", "kind" : "def"}, {"label" : "correctTypo", "tail" : "(chunk: CharSequence): CharSequence", "member" : "org.openkoreantext.processor.normalizer.KoreanNormalizer.correctTypo", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#correctTypo(chunk:CharSequence):CharSequence", "kind" : "def"}, {"label" : "normalize", "tail" : "(input: CharSequence): CharSequence", "member" : "org.openkoreantext.processor.normalizer.KoreanNormalizer.normalize", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#normalize(input:CharSequence):CharSequence", "kind" : "def"}, {"label" : "REPEATING_CHAR_REGEX", "tail" : ": Regex", "member" : "org.openkoreantext.processor.normalizer.KoreanNormalizer.REPEATING_CHAR_REGEX", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#REPEATING_CHAR_REGEX:scala.util.matching.Regex", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/normalizer\/KoreanNormalizer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org.openkoreantext" : [], "org" : [], "org.openkoreantext.processor.tokenizer" : [{"name" : "org.openkoreantext.processor.tokenizer.KoreanChunk", "shortDescription" : "", "members_case class" : [{"member" : "org.openkoreantext.processor.tokenizer.KoreanChunk#<init>", "error" : "unsupported entity"}, {"label" : "length", "tail" : ": Int", "member" : "org.openkoreantext.processor.tokenizer.KoreanChunk.length", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#length:Int", "kind" : "val"}, {"label" : "offset", "tail" : ": Int", "member" : "org.openkoreantext.processor.tokenizer.KoreanChunk.offset", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#offset:Int", "kind" : "val"}, {"label" : "text", "tail" : ": String", "member" : "org.openkoreantext.processor.tokenizer.KoreanChunk.text", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#text:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunk.html", "kind" : "case class"}, {"name" : "org.openkoreantext.processor.tokenizer.KoreanChunker", "shortDescription" : "Split input text into Korean Chunks (어절)", "object" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html", "members_object" : [{"label" : "chunk", "tail" : "(input: CharSequence): Seq[KoreanToken]", "member" : "org.openkoreantext.processor.tokenizer.KoreanChunker.chunk", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#chunk(input:CharSequence):Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]", "kind" : "def"}, {"label" : "getChunksByPos", "tail" : "(input: String, pos: KoreanPos): Seq[KoreanToken]", "member" : "org.openkoreantext.processor.tokenizer.KoreanChunker.getChunksByPos", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#getChunksByPos(input:String,pos:org.openkoreantext.processor.util.KoreanPos.KoreanPos):Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]", "kind" : "def"}, {"label" : "splitBySpaceKeepingSpace", "tail" : "(s: CharSequence): Seq[String]", "member" : "org.openkoreantext.processor.tokenizer.KoreanChunker.splitBySpaceKeepingSpace", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#splitBySpaceKeepingSpace(s:CharSequence):Seq[String]", "kind" : "def"}, {"label" : "getChunks", "tail" : "(input: String, keepSpace: Boolean): Seq[String]", "member" : "org.openkoreantext.processor.tokenizer.KoreanChunker.getChunks", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#getChunks(input:String,keepSpace:Boolean):Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanChunker$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.tokenizer.KoreanDetokenizer", "shortDescription" : "Detokenizes a list of tokenized words into a readable sentence.", "object" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html", "members_object" : [{"label" : "detokenize", "tail" : "(input: Iterable[String]): String", "member" : "org.openkoreantext.processor.tokenizer.KoreanDetokenizer.detokenize", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#detokenize(input:Iterable[String]):String", "kind" : "def"}, {"label" : "PrefixPos", "tail" : ": Set[util.KoreanPos.Value]", "member" : "org.openkoreantext.processor.tokenizer.KoreanDetokenizer.PrefixPos", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#PrefixPos:scala.collection.immutable.Set[org.openkoreantext.processor.util.KoreanPos.Value]", "kind" : "val"}, {"label" : "SuffixPos", "tail" : ": Set[util.KoreanPos.Value]", "member" : "org.openkoreantext.processor.tokenizer.KoreanDetokenizer.SuffixPos", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#SuffixPos:scala.collection.immutable.Set[org.openkoreantext.processor.util.KoreanPos.Value]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanDetokenizer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.tokenizer.KoreanSentenceSplitter", "shortDescription" : "Sentence Splitter", "object" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html", "members_object" : [{"label" : "split", "tail" : "(s: CharSequence): Seq[Sentence]", "member" : "org.openkoreantext.processor.tokenizer.KoreanSentenceSplitter.split", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#split(s:CharSequence):Seq[org.openkoreantext.processor.tokenizer.Sentence]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanSentenceSplitter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.tokenizer.KoreanTokenizer", "shortDescription" : "Provides Korean tokenization.", "object" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html", "members_object" : [{"label" : "KoreanToken", "tail" : "", "member" : "org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#KoreanTokenextendsProductwithSerializable", "kind" : "case class"}, {"label" : "tokenizeTopN", "tail" : "(text: CharSequence, topN: Int, profile: TokenizerProfile): Seq[Seq[Seq[KoreanToken]]]", "member" : "org.openkoreantext.processor.tokenizer.KoreanTokenizer.tokenizeTopN", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#tokenizeTopN(text:CharSequence,topN:Int,profile:org.openkoreantext.processor.tokenizer.TokenizerProfile):Seq[Seq[Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]]]", "kind" : "def"}, {"label" : "tokenize", "tail" : "(text: CharSequence, profile: TokenizerProfile): Seq[KoreanToken]", "member" : "org.openkoreantext.processor.tokenizer.KoreanTokenizer.tokenize", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#tokenize(text:CharSequence,profile:org.openkoreantext.processor.tokenizer.TokenizerProfile):Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/KoreanTokenizer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.tokenizer.ParsedChunk", "shortDescription" : "", "object" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html", "members_object" : [{"label" : "preferredBeforeHaVerb", "tail" : ": Set[util.KoreanPos.Value]", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.preferredBeforeHaVerb", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#preferredBeforeHaVerb:scala.collection.immutable.Set[org.openkoreantext.processor.util.KoreanPos.Value]", "kind" : "val"}, {"label" : "suffixes", "tail" : ": Set[util.KoreanPos.Value]", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.suffixes", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#suffixes:scala.collection.immutable.Set[org.openkoreantext.processor.util.KoreanPos.Value]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "josaMismatched", "tail" : "(): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.josaMismatched", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#josaMismatched:Int", "kind" : "def"}, {"label" : "countPos", "tail" : "(pos: KoreanPos): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.countPos", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#countPos(pos:org.openkoreantext.processor.util.KoreanPos.KoreanPos):Int", "kind" : "def"}, {"label" : "++", "tail" : "(that: ParsedChunk): ParsedChunk", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.++", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#++(that:org.openkoreantext.processor.tokenizer.ParsedChunk):org.openkoreantext.processor.tokenizer.ParsedChunk", "kind" : "def"}, {"label" : "getFreqScore", "tail" : "(): Float", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.getFreqScore", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#getFreqScore:Float", "kind" : "def"}, {"label" : "getUnknownCoverage", "tail" : "(): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.getUnknownCoverage", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#getUnknownCoverage:Int", "kind" : "def"}, {"label" : "posTieBreaker", "tail" : "(): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.posTieBreaker", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#posTieBreaker:Int", "kind" : "def"}, {"label" : "isNounHa", "tail" : "(): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.isNounHa", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#isNounHa:Int", "kind" : "def"}, {"label" : "isPreferredPattern", "tail" : "(): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.isPreferredPattern", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#isPreferredPattern:Int", "kind" : "def"}, {"label" : "isAllNouns", "tail" : "(): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.isAllNouns", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#isAllNouns:Int", "kind" : "def"}, {"label" : "hasSpaceOutOfGuide", "tail" : "(): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.hasSpaceOutOfGuide", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#hasSpaceOutOfGuide:Int", "kind" : "def"}, {"label" : "isExactMatch", "tail" : "(): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.isExactMatch", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#isExactMatch:Int", "kind" : "def"}, {"label" : "isInitialPostPosition", "tail" : "(): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.isInitialPostPosition", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#isInitialPostPosition:Int", "kind" : "def"}, {"label" : "countTokens", "tail" : "(): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.countTokens", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#countTokens:Int", "kind" : "def"}, {"label" : "countUnknowns", "tail" : "(): Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.countUnknowns", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#countUnknowns:Int", "kind" : "def"}, {"label" : "score", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.score", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#score:Float", "kind" : "lazy val"}, {"member" : "org.openkoreantext.processor.tokenizer.ParsedChunk#<init>", "error" : "unsupported entity"}, {"label" : "profile", "tail" : ": TokenizerProfile", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.profile", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#profile:org.openkoreantext.processor.tokenizer.TokenizerProfile", "kind" : "val"}, {"label" : "words", "tail" : ": Int", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.words", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#words:Int", "kind" : "val"}, {"label" : "posNodes", "tail" : ": Seq[KoreanToken]", "member" : "org.openkoreantext.processor.tokenizer.ParsedChunk.posNodes", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#posNodes:Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/openkoreantext\/processor\/tokenizer\/ParsedChunk.html", "kind" : "object"}, {"name" : "org.openkoreantext.processor.tokenizer.Sentence", "shortDescription" : "", "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.openkoreantext.processor.tokenizer.Sentence.toString", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#toString():String", "kind" : "def"}, {"member" : "org.openkoreantext.processor.tokenizer.Sentence#<init>", "error" : "unsupported entity"}, {"label" : "end", "tail" : ": Int", "member" : "org.openkoreantext.processor.tokenizer.Sentence.end", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#end:Int", "kind" : "val"}, {"label" : "start", "tail" : ": Int", "member" : "org.openkoreantext.processor.tokenizer.Sentence.start", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#start:Int", "kind" : "val"}, {"label" : "text", "tail" : ": String", "member" : "org.openkoreantext.processor.tokenizer.Sentence.text", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#text:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/openkoreantext\/processor\/tokenizer\/Sentence.html", "kind" : "case class"}, {"name" : "org.openkoreantext.processor.tokenizer.TokenizerProfile", "shortDescription" : "", "object" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html", "members_object" : [{"label" : "defaultProfile", "tail" : ": TokenizerProfile", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.defaultProfile", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#defaultProfile:org.openkoreantext.processor.tokenizer.TokenizerProfile", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile#<init>", "error" : "unsupported entity"}, {"label" : "josaUnmatchedPenalty", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.josaUnmatchedPenalty", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#josaUnmatchedPenalty:Float", "kind" : "val"}, {"label" : "spaceGuidePenalty", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.spaceGuidePenalty", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#spaceGuidePenalty:Float", "kind" : "val"}, {"label" : "spaceGuide", "tail" : ": Set[Int]", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.spaceGuide", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#spaceGuide:Set[Int]", "kind" : "val"}, {"label" : "preferredPatterns", "tail" : ": Seq[Seq[Any]]", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.preferredPatterns", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#preferredPatterns:Seq[Seq[Any]]", "kind" : "val"}, {"label" : "preferredPattern", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.preferredPattern", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#preferredPattern:Float", "kind" : "val"}, {"label" : "haVerb", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.haVerb", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#haVerb:Float", "kind" : "val"}, {"label" : "initialPostPosition", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.initialPostPosition", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#initialPostPosition:Float", "kind" : "val"}, {"label" : "exclamationPosCount", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.exclamationPosCount", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#exclamationPosCount:Float", "kind" : "val"}, {"label" : "determinerPosCount", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.determinerPosCount", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#determinerPosCount:Float", "kind" : "val"}, {"label" : "unknownPosCount", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.unknownPosCount", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#unknownPosCount:Float", "kind" : "val"}, {"label" : "allNoun", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.allNoun", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#allNoun:Float", "kind" : "val"}, {"label" : "exactMatch", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.exactMatch", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#exactMatch:Float", "kind" : "val"}, {"label" : "unknownCoverage", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.unknownCoverage", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#unknownCoverage:Float", "kind" : "val"}, {"label" : "freq", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.freq", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#freq:Float", "kind" : "val"}, {"label" : "wordCount", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.wordCount", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#wordCount:Float", "kind" : "val"}, {"label" : "unknown", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.unknown", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#unknown:Float", "kind" : "val"}, {"label" : "tokenCount", "tail" : ": Float", "member" : "org.openkoreantext.processor.tokenizer.TokenizerProfile.tokenCount", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#tokenCount:Float", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/openkoreantext\/processor\/tokenizer\/TokenizerProfile.html", "kind" : "object"}], "org.openkoreantext.processor" : [{"name" : "org.openkoreantext.processor.KoreanPosJava", "shortDescription" : "These enum class doesn't follow Java's POS capitalization convention intentionallyto match with Scala's org.openkoreantext.processor.util.KoreanPos enumeration.", "members_class" : [{"label" : "finalize", "tail" : "(): Unit", "member" : "java.lang.Enum.finalize", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#finalize():Unit", "kind" : "final def"}, {"label" : "getDeclaringClass", "tail" : "(): Class[KoreanPosJava]", "member" : "java.lang.Enum.getDeclaringClass", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#getDeclaringClass():Class[E]", "kind" : "final def"}, {"label" : "compareTo", "tail" : "(arg0: KoreanPosJava): Int", "member" : "java.lang.Enum.compareTo", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#compareTo(x$1:E):Int", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "java.lang.Enum.clone", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#clone():Object", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "java.lang.Enum.hashCode", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "java.lang.Enum.equals", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#equals(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Enum.toString", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#toString():String", "kind" : "def"}, {"label" : "ordinal", "tail" : "(): Int", "member" : "java.lang.Enum.ordinal", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#ordinal():Int", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "java.lang.Enum.name", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#name():String", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/KoreanPosJava.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/openkoreantext\/processor\/KoreanPosJava.html", "kind" : "class"}, {"name" : "org.openkoreantext.processor.KoreanTokenJava", "shortDescription" : "", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "org.openkoreantext.processor.KoreanTokenJava.toString", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#toString():String", "kind" : "def"}, {"label" : "isUnknown", "tail" : "(): Boolean", "member" : "org.openkoreantext.processor.KoreanTokenJava.isUnknown", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#isUnknown():Boolean", "kind" : "def"}, {"label" : "getLength", "tail" : "(): Int", "member" : "org.openkoreantext.processor.KoreanTokenJava.getLength", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#getLength():Int", "kind" : "def"}, {"label" : "getOffset", "tail" : "(): Int", "member" : "org.openkoreantext.processor.KoreanTokenJava.getOffset", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#getOffset():Int", "kind" : "def"}, {"label" : "getPos", "tail" : "(): KoreanPosJava", "member" : "org.openkoreantext.processor.KoreanTokenJava.getPos", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#getPos():org.openkoreantext.processor.KoreanPosJava", "kind" : "def"}, {"label" : "getText", "tail" : "(): String", "member" : "org.openkoreantext.processor.KoreanTokenJava.getText", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#getText():String", "kind" : "def"}, {"label" : "getStem", "tail" : "(): String", "member" : "org.openkoreantext.processor.KoreanTokenJava.getStem", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#getStem():String", "kind" : "def"}, {"member" : "org.openkoreantext.processor.KoreanTokenJava#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/KoreanTokenJava.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/openkoreantext\/processor\/KoreanTokenJava.html", "kind" : "class"}, {"name" : "org.openkoreantext.processor.OpenKoreanTextProcessor", "shortDescription" : "OpenKoreanTextProcessor provides error and slang tolerant Korean tokenization.", "object" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html", "members_object" : [{"label" : "detokenize", "tail" : "(tokens: Iterable[String]): String", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.detokenize", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#detokenize(tokens:Iterable[String]):String", "kind" : "def"}, {"label" : "extractPhrases", "tail" : "(tokens: Seq[KoreanToken], filterSpam: Boolean, enableHashtags: Boolean): Seq[KoreanPhrase]", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.extractPhrases", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#extractPhrases(tokens:Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken],filterSpam:Boolean,enableHashtags:Boolean):Seq[org.openkoreantext.processor.phrase_extractor.KoreanPhraseExtractor.KoreanPhrase]", "kind" : "def"}, {"label" : "splitSentences", "tail" : "(text: CharSequence): Seq[Sentence]", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.splitSentences", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#splitSentences(text:CharSequence):Seq[org.openkoreantext.processor.tokenizer.Sentence]", "kind" : "def"}, {"label" : "tokensToStrings", "tail" : "(tokens: Seq[KoreanToken]): Seq[String]", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.tokensToStrings", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#tokensToStrings(tokens:Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]):Seq[String]", "kind" : "def"}, {"label" : "removeWordsFromDictionary", "tail" : "(pos: KoreanPos, words: Seq[String]): Boolean", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.removeWordsFromDictionary", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#removeWordsFromDictionary(pos:org.openkoreantext.processor.util.KoreanPos.KoreanPos,words:Seq[String]):Boolean", "kind" : "def"}, {"label" : "addWordsToDictionary", "tail" : "(pos: KoreanPos, words: Seq[String]): Boolean", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.addWordsToDictionary", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#addWordsToDictionary(pos:org.openkoreantext.processor.util.KoreanPos.KoreanPos,words:Seq[String]):Boolean", "kind" : "def"}, {"label" : "addNounsToDictionary", "tail" : "(words: Seq[String]): Boolean", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.addNounsToDictionary", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#addNounsToDictionary(words:Seq[String]):Boolean", "kind" : "def"}, {"label" : "tokenizeTopN", "tail" : "(text: CharSequence, n: Int, profile: TokenizerProfile): Seq[Seq[Seq[KoreanToken]]]", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.tokenizeTopN", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#tokenizeTopN(text:CharSequence,n:Int,profile:org.openkoreantext.processor.tokenizer.TokenizerProfile):Seq[Seq[Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]]]", "kind" : "def"}, {"label" : "tokenizeTopN", "tail" : "(text: CharSequence, n: Int): Seq[Seq[Seq[KoreanToken]]]", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.tokenizeTopN", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#tokenizeTopN(text:CharSequence,n:Int):Seq[Seq[Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]]]", "kind" : "def"}, {"label" : "tokenize", "tail" : "(text: CharSequence, profile: TokenizerProfile): Seq[KoreanToken]", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.tokenize", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#tokenize(text:CharSequence,profile:org.openkoreantext.processor.tokenizer.TokenizerProfile):Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]", "kind" : "def"}, {"label" : "tokenize", "tail" : "(text: CharSequence): Seq[KoreanToken]", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.tokenize", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#tokenize(text:CharSequence):Seq[org.openkoreantext.processor.tokenizer.KoreanTokenizer.KoreanToken]", "kind" : "def"}, {"label" : "normalize", "tail" : "(text: CharSequence): CharSequence", "member" : "org.openkoreantext.processor.OpenKoreanTextProcessor.normalize", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#normalize(text:CharSequence):CharSequence", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.openkoreantext.processor.OpenKoreanTextProcessorJava", "shortDescription" : "Java wrapper for TwitterKoreanProcessor using Builder pattern", "members_class" : [{"member" : "org.openkoreantext.processor.OpenKoreanTextProcessorJava#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/openkoreantext\/processor\/OpenKoreanTextProcessorJava.html", "kind" : "class"}]};